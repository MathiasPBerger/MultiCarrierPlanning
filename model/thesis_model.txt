#TIMEHORIZON
T = 8760 * 5;

#GLOBAL
number_years_horizon = (T - mod(T, 8760)) / 8760;
number_weeks_horizon = 52 * number_years_horizon;
number_days_horizon = 365 * number_years_horizon;
demand_el_base = import "../data/base_demand_electricity.csv"; // GWh/h - hourly (aggregate) tertiary, industry, residential and railway electricity demand
demand_el_ht = import "../data/heat_demand_electricity.csv"; // GWh/h - hourly electricity heat demand
demand_el_ev = import "../data/ev_consumption.csv"; // GWh - daily electricity demand for EV charging
total_demand_el = sum(demand_el_base[h] for h in [0:T-1]) + sum(demand_el_ht[h] for h in [0:T-1]) + sum(demand_el_ev[d] for d in [0:number_days_horizon-1]);
max_capacity_DAC = 100.0; // kt/h; set to 100.0 for S4->5
max_capacity_PCCC = 100.0; // kt/h; set to 100.0 for S3->5
max_RES_capacity_multiplier = 10.0; // dimensionless; set to 10.0 for S5
max_nuclear_capacity_multiplier = 0.0; // dimensionless; set to 1.0 for S2
max_carbon_dioxide_storage_capacity_multiplier = 1.0; // dimensionlees; set to 1.0 for S3->5
carbon_dioxide_emissions_cost = 0.08; // MEur/kt (i.e., 80 â‚¬/ton)

#NODE SOLAR_PV_PLANTS
#PARAMETERS
full_capex = 510.0; // MEur/GW_el
lifetime = 30.0; // yr
annualised_capex = full_capex / lifetime; // MEur/GW_el-yr
fom = 8.8; // MEur/GW_el-yr
vom = 0.0; // MEur/GWh
capacity_factor = import "../data/capacity_factor_solar_PV.csv"; // dimensionless
pre_installed_capacity = 4.0; // GW_el
max_capacity = 40.0 * global.max_RES_capacity_multiplier; // GW_el
#VARIABLES
internal: capacity; // GW_el
external: electricity[T]; // GW_el
#CONSTRAINTS
capacity >= 0;
electricity[t] >= 0;
electricity[t] <= capacity_factor[t] * (pre_installed_capacity + capacity);
pre_installed_capacity + capacity <= max_capacity;
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
min fom_cost: global.number_years_horizon * fom * capacity; // MEur
min vom_cost: vom * electricity[t]; // MEur

#NODE ONSHORE_WIND_PLANTS
#PARAMETERS
full_capex = 910.0; // MEur/GW_el
lifetime = 30.0; // yr
annualised_capex = full_capex / lifetime; // MEur/GW_el-yr
fom = 22.3; // MEur/GW_el-yr
vom = 0.0023; // MEur/GWh
capacity_factor = import "../data/capacity_factor_onshore_wind.csv"; // dimensionless
pre_installed_capacity = 2.8; // GW_el
max_capacity = 8.4 * global.max_RES_capacity_multiplier; // GW_el
#VARIABLES
internal: capacity; // GW_el
external: electricity[T];
#CONSTRAINTS
capacity >= 0;
electricity[t] >= 0;
electricity[t] <= capacity_factor[t] * (pre_installed_capacity + capacity);
pre_installed_capacity + capacity <= max_capacity;
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
min fom_cost: global.number_years_horizon * fom * capacity; // MEur
min vom_cost: vom * electricity[t]; // MEur

#NODE OFFSHORE_WIND_PLANTS
#PARAMETERS
full_capex = 2000.0; // MEur/GW_el
lifetime = 30.0; // yr
annualised_capex = full_capex / lifetime; // MEur/GW_el-yr
fom = 37.8; // MEur/GW_el-yr
vom = 0.0027; // MEur/GWh
capacity_factor = import "../data/capacity_factor_offshore_wind.csv"; // dimensionless
pre_installed_capacity = 2.3; // GW
max_capacity = 8.0 * global.max_RES_capacity_multiplier; // GW
#VARIABLES
internal: capacity; // GW_el
external: electricity[T]; // GW
#CONSTRAINTS
capacity >= 0;
electricity[t] >= 0;
electricity[t] <= capacity_factor[t] * (pre_installed_capacity + capacity);
pre_installed_capacity + capacity <= max_capacity;
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
min fom_cost: global.number_years_horizon * fom * capacity; // MEur
min vom_cost: vom * electricity[t]; // MEur

#NODE WASTE_POWER_PLANTS_w_PCCC
  #NODE WASTE_POWER_PLANTS
  #PARAMETERS
  fom = 175.6; // MEur/GW_el-yr
  vom = 0.0248; // MEur/GWh_el
  fuel_cost = 0.01; // MEur/GWh_th
  pre_installed_capacity = 0.3; // GW_el
  ramp_rate_up = 0.25; // dimensionless (fraction)
  ramp_rate_down = 0.3; // dimensionless (fraction)
  minimum_level = 0.2; // dimensionless (fraction)
  specific_emissions = 0.33; // kt/GWh_th
  thermal_efficiency = 0.227; // thermal efficiency of power plant
  conversion_factor_waste = thermal_efficiency;
  conversion_factor_carbon_dioxide = thermal_efficiency / specific_emissions;
  #VARIABLES
  internal: electricity[T]; // GWh/h
  internal: waste[T];
  external: carbon_dioxide[T]; // kt/h
  #CONSTRAINTS
  electricity[t] >= 0;
  carbon_dioxide[t] >= 0;
  minimum_level * pre_installed_capacity <= electricity[t];
  electricity[t] <= pre_installed_capacity;
  electricity[t] == conversion_factor_waste * waste[t];
  electricity[t] == conversion_factor_carbon_dioxide * carbon_dioxide[t];
  electricity[t] <= electricity[t-1] + ramp_rate_up * pre_installed_capacity;
  electricity[t] >= electricity[t-1] - ramp_rate_down * pre_installed_capacity;
  #OBJECTIVES
  min fom_cost: global.number_years_horizon * fom * pre_installed_capacity; // MEur
  min fuel_cost: fuel_cost * waste[t]; // MEur
  min non_fuel_vom_cost: vom * electricity[t]; // MEur

  #NODE PCCC // post-combustion carbon capture of waste power plants
  #PARAMETERS
  full_capex = 2160.0; // MEur/(kt_CO2/h)
  lifetime = 20.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/(kt_CO2/h)-yr
  fom = 0.0; // MEur/(kt_CO2/h)-yr
  vom = 0.0; // MEur/kt_CO2
  max_capacity = global.max_capacity_PCCC; // kt_CO2/h
  max_capture_rate = 0.9; // dimensionless (fraction)
  electricity_cons_capture = 0.4125; // GWh/kt_CO2
  conversion_factor_electricity = 1 / electricity_cons_capture;
  #VARIABLES
  internal: capacity; // kt_CO2/h
  internal: electricity[T]; // GW
  external: carbon_dioxide_intake[T]; // kt_CO2/h
  internal: carbon_dioxide_emitted[T]; // kt_CO2/h
  internal: carbon_dioxide_captured[T]; // kt_CO2/h
  #CONSTRAINTS
  capacity >= 0;
  electricity[t] >= 0;
  carbon_dioxide_intake[t] >= 0;
  carbon_dioxide_emitted[t] >= 0;
  carbon_dioxide_captured[t] >= 0;
  capacity <= max_capacity;
  carbon_dioxide_captured[t] <= capacity;
  carbon_dioxide_captured[t] == conversion_factor_electricity * electricity[t];
  carbon_dioxide_captured[t] <= max_capture_rate * carbon_dioxide_intake[t];
  carbon_dioxide_intake[t] == carbon_dioxide_captured[t] + carbon_dioxide_emitted[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity;
  min fom_cost: global.number_years_horizon * fom * capacity;
  min vom_cost: vom * carbon_dioxide_captured[t]; // MEur

  #HYPEREDGE WASTE_PLANTS_LINKS
  #CONSTRAINTS
  WASTE_POWER_PLANTS.carbon_dioxide[t] == PCCC.carbon_dioxide_intake[t];

#VARIABLES
external: electricity[T];
internal: electricity_WASTE_POWER_PLANTS[T] <- WASTE_POWER_PLANTS.electricity[T];
internal: electricity_PCCC[T] <- PCCC.electricity[T];
external: carbon_dioxide_emitted[T] <- PCCC.carbon_dioxide_emitted[T];
external: carbon_dioxide_captured[T] <- PCCC.carbon_dioxide_captured[T];
#CONSTRAINTS
electricity[t] == electricity_WASTE_POWER_PLANTS[t] - electricity_PCCC[t];
#OBJECTIVES
min emissions_cost: global.carbon_dioxide_emissions_cost * carbon_dioxide_emitted[t]; // MEur

#NODE BIOMASS_POWER_PLANTS_w_PCCC
  #NODE BIOMASS_POWER_PLANTS
  #PARAMETERS
  fom = 102.951; // MEur/GW_el-yr
  vom = 0.00513; // MEur/GWh_el
  fuel_cost = 0.035; // MEur/GWh_th
  pre_installed_capacity = 0.9; // GW_el
  ramp_rate_up = 0.25; // dimensionless (fraction)
  ramp_rate_down = 0.3; // dimensionless (fraction)
  minimum_level = 0.0; // dimensionless (fraction)
  specific_emissions = 0.4; // kt/GWh_th
  thermal_efficiency = 0.281; // thermal efficiency of power plant (fraction)
  conversion_factor_biomass = thermal_efficiency;
  conversion_factor_carbon_dioxide = thermal_efficiency / specific_emissions;
  #VARIABLES
  internal: electricity[T]; // GW
  internal: biomass[T];
  external: carbon_dioxide[T]; // kt/h
  #CONSTRAINTS
  electricity[t] >= 0;
  carbon_dioxide[t] >= 0;
  minimum_level * pre_installed_capacity <= electricity[t];
  electricity[t] <= pre_installed_capacity;
  electricity[t] == conversion_factor_biomass * biomass[t];
  electricity[t] == conversion_factor_carbon_dioxide * carbon_dioxide[t];
  electricity[t] <= electricity[t-1] + ramp_rate_up * pre_installed_capacity;
  electricity[t] >= electricity[t-1] - ramp_rate_down * pre_installed_capacity;
  #OBJECTIVES
  min fom_cost: global.number_years_horizon * fom * pre_installed_capacity; // MEur
  min fuel_cost: fuel_cost * biomass[t]; // MEur
  min non_fuel_vom_cost: vom * electricity[t]; // MEur

  #NODE PCCC // post-combustion carbon capture of biomass power plants
  #PARAMETERS
  full_capex = 2160.0; // MEur/(kt_CO2/h)
  lifetime = 20.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/(kt_CO2/h)-yr
  fom = 0.0; // MEur/(kt_CO2/h)-yr
  vom = 0.0; // MEur/kt_CO2
  electricity_cons_capture = 0.4125; // GWh/kt
  max_capacity = global.max_capacity_PCCC; // kt_CO2/h
  max_capture_rate = 0.9; // dimensionless
  conversion_factor_electricity = 1 / electricity_cons_capture;
  #VARIABLES
  internal: capacity; // kt_CO2/h
  internal: electricity[T];
  external: carbon_dioxide_intake[T];
  internal: carbon_dioxide_emitted[T];
  internal: carbon_dioxide_captured[T];
  #CONSTRAINTS
  capacity >= 0;
  electricity[t] >= 0;
  carbon_dioxide_intake[t] >= 0;
  carbon_dioxide_emitted[t] >= 0;
  carbon_dioxide_captured[t] >= 0;
  capacity <= max_capacity;
  carbon_dioxide_captured[t] <= capacity;
  carbon_dioxide_captured[t] <= max_capture_rate * carbon_dioxide_intake[t];
  carbon_dioxide_intake[t] == carbon_dioxide_captured[t] + carbon_dioxide_emitted[t];
  carbon_dioxide_captured[t] == conversion_factor_electricity * electricity[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
  min fom_cost: global.number_years_horizon * fom * capacity; // MEur
  min vom_cost: vom * carbon_dioxide_captured[t]; // MEur

  #HYPEREDGE BIOMASS_PLANTS_LINKS
  #CONSTRAINTS
  BIOMASS_POWER_PLANTS.carbon_dioxide[t] == PCCC.carbon_dioxide_intake[t];

#VARIABLES
external: electricity[T];
internal: electricity_BIOMASS_POWER_PLANTS[T] <- BIOMASS_POWER_PLANTS.electricity[T];
internal: electricity_PCCC[T] <- PCCC.electricity[T];
external: carbon_dioxide_emitted[T] <- PCCC.carbon_dioxide_emitted[T];
external: carbon_dioxide_captured[T] <- PCCC.carbon_dioxide_captured[T];
#CONSTRAINTS
electricity[t] == electricity_BIOMASS_POWER_PLANTS[t] - electricity_PCCC[t];
#OBJECTIVES
min emissions_cost: global.carbon_dioxide_emissions_cost * carbon_dioxide_emitted[t]; // MEur

#NODE NUCLEAR_POWER_PLANTS
#PARAMETERS
fom = 92.979; // MEur/GW_el-yr
vom = 0.002133; // MEur/GWh_el
fuel_cost = 0.0; // MEur/GWh_th
pre_installed_capacity = 3.0 * global.max_nuclear_capacity_multiplier; // GW_el
ramp_rate_up = 0.01; // dimensionless
ramp_rate_down = 0.01; // dimensionless
minimum_level = 0.0; // dimensionless
thermal_efficiency = 0.4; // dimensionless
conversion_factor_uranium = thermal_efficiency; // dimensionless
#VARIABLES
external: electricity[T]; // GWh/h
internal: uranium[T];
#CONSTRAINTS
electricity[t] >= 0;
minimum_level * pre_installed_capacity <= electricity[t];
electricity[t] <= pre_installed_capacity;
electricity[t] == conversion_factor_uranium * uranium[t];
electricity[t] <= electricity[t-1] + ramp_rate_up * pre_installed_capacity;
electricity[t] >= electricity[t-1] - ramp_rate_down * pre_installed_capacity;
#OBJECTIVES
min fom_cost: global.number_years_horizon * fom * pre_installed_capacity; // MEur
min fuel_cost: fuel_cost * uranium[t]; // MEur
min non_fuel_vom_cost: vom * electricity[t]; // MEur

#NODE NATURAL_GAS_IMPORTS
#PARAMETERS
capacity = 90.0; // GWh/h - max instantaneous import capacity
import_cost = import "../data/import_costs_natural_gas.csv"; // MEur/GWh
base_demand = 182 * 10**3; // TWh
max_share_base_demand = 5; // dimensionless - up to 500% of base demand can be imported
imports_budget = base_demand * max_share_base_demand * global.number_years_horizon; // total imports budget over time horizon
#VARIABLES
external: natural_gas[T]; // GWh/h
#CONSTRAINTS
natural_gas[t] >= 0;
natural_gas[t] <= capacity;
sum(natural_gas[i] for i in [0:T-1]) <= imports_budget;
#OBJECTIVES
min imports_cost: import_cost[t] * natural_gas[t]; // MEur

#NODE HYDROGEN_IMPORTS
#PARAMETERS
capacity = import "../data/import_capacity_hydrogen.csv"; // GWh/h
import_cost = import "../data/import_costs_hydrogen.csv"; // MEur/GWh (i.e., 160 â‚¬/MWh)
tanker_capacity = 165; // GWh
delivery_p_week = 3; // dimensionless - number of tanker deliveries per week
base_factor = 2.0; // dimensionless
imports_budget = base_factor * tanker_capacity * delivery_p_week * global.number_weeks_horizon; // GWh
#VARIABLES
external: hydrogen[T]; // GWh/h
#CONSTRAINTS
hydrogen[t] >= 0;
hydrogen[t] <= capacity[t];
sum(hydrogen[i] for i in [0:T-1]) <= imports_budget;
#OBJECTIVES
min imports_cost: import_cost[t] * hydrogen[t]; // MEur

#NODE ELECTRICITY_INTERCONNECTION
#PARAMETERS
capacity = 6.5; // GW - instantaneous import capacity
import_cost = import "../data/import_costs_electricity.csv"; // MEur/GWh
max_import_share = 0.1; // dimensionless - share of demand that can be imported
imports_budget = max_import_share * global.total_demand_el; // imports budget over entire time horizon
#VARIABLES
external: electricity_imported[T]; // GWh/h
external: electricity_exported[T]; // GWh/h
external: electricity[T]; // GWh/h
#CONSTRAINTS
electricity_imported[t] >= 0;
electricity_exported[t] >= 0;
electricity_imported[t] <= capacity;
electricity_exported[t] <= capacity;
sum(electricity_imported[i] for i in [0:T-1]) <= imports_budget;
electricity[t] == electricity_imported[t] - electricity_exported[t];
#OBJECTIVES
min imports_cost: import_cost[t] * electricity[t]; // MEur

#NODE CARBON_DIOXIDE_EXPORTS
#PARAMETERS
export_cost = 0.002; // MEur/kt (i.e., 2 â‚¬/ton_CO2)
capacity = 3.5; // kt/h - maximum instantaneous carbon dioxide export capacity
#VARIABLES
external: carbon_dioxide[T]; // kt/h
#CONSTRAINTS
carbon_dioxide[t] >= 0;
carbon_dioxide[t] <= capacity;
#OBJECTIVES
min exports_cost: export_cost * carbon_dioxide[t]; // MEur

#NODE ELECTROLYSIS_PLANTS
#PARAMETERS
full_capex = 600.0; // MEur/GW_el
lifetime = 15.0; // yr
annualised_capex = full_capex / lifetime; // MEur/GW_el-yr
fom = 30.0; // MEur/GW-yr
vom = 0.0; // Mâ‚¬/GWh
conversion_factor_electricity = 0.62; // dimensionless - energy efficiency
minimum_level = 0.05; // dimensionless - minimum production level (fraction of installed capacity)
pre_installed_capacity = 0.0; // GW_el
max_capacity = 13.5; // GW_el
#VARIABLES
internal: capacity; // GW_el
external: electricity[T]; // GWh
external: hydrogen[T]; // GWh/h
#CONSTRAINTS
capacity >= 0;
electricity[t] >= 0;
hydrogen[t] >= 0;
electricity[t] <= (pre_installed_capacity + capacity);
minimum_level * (pre_installed_capacity + capacity) <= electricity[t];
pre_installed_capacity + capacity <= max_capacity;
hydrogen[t] == conversion_factor_electricity * electricity[t];
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
min fom_cost: global.number_years_horizon * fom * capacity; // MEur
min vom_cost: vom * electricity[t]; // MEur

#NODE HYDROGEN_FUEL_CELLS
#PARAMETERS
full_capex = 2000.0; // MEur/GW_el
lifetime = 30.0; // yr
annualised_capex = full_capex / lifetime; // MEur/GW_el-yr
fom = 100.0; // MEur/GW_el
vom = 0.0; // MEur/GWh
conversion_factor_hydrogen = 0.5; // dimensionless - energy efficiency
minimum_level = 0.0; // dimensionless
pre_installed_capacity = 0.0; // GW_el
max_capacity = 13.5; // GW_el
#VARIABLES
internal: capacity; // GW_el
external: electricity[T]; // GW
external: hydrogen[T]; // GWh/h
#CONSTRAINTS
capacity >= 0;
electricity[t] >= 0;
hydrogen[t] >= 0;
pre_installed_capacity + capacity <= max_capacity;
electricity[t] <= (pre_installed_capacity + capacity);
minimum_level * (pre_installed_capacity + capacity) <= electricity[t];
electricity[t] == conversion_factor_hydrogen * hydrogen[t];
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
min fom_cost: global.number_years_horizon * fom * capacity; // MEur
min vom_cost: vom * electricity[t]; // MEur

#NODE CHP_PLANTS_w_PCCC // combined heat and power plants with post-combustion carbon capture
  #NODE CHP_PLANTS // combined heat and power plants
  #PARAMETERS
  fom = 40.0; // MEur/GW_el-yr
  vom = 0.0; // MEur/GWh
  pre_installed_capacity = 1.8; // GW_el
  ramp_rate_up = 0.25; // dimensionless
  ramp_rate_down = 0.3; // dimensionless
  minimum_level = 0.2; // dimensionless
  specific_emissions = 0.202;  // kt/GWh
  thermal_efficiency = 0.49; // dimensionless
  conversion_factor_natural_gas = thermal_efficiency;
  conversion_factor_carbon_dioxide = thermal_efficiency / specific_emissions;
  #VARIABLES
  internal: electricity[T]; // GW
  internal: natural_gas[T]; // GWh/h
  external: carbon_dioxide[T]; // kt/h
  #CONSTRAINTS
  electricity[t] >= 0;
  natural_gas[t] >= 0;
  carbon_dioxide[t] >= 0;
  minimum_level * pre_installed_capacity <= electricity[t];
  electricity[t] <= pre_installed_capacity;
  electricity[t] == conversion_factor_natural_gas * natural_gas[t];
  electricity[t] == conversion_factor_carbon_dioxide * carbon_dioxide[t];
  electricity[t] <= electricity[t-1] + ramp_rate_up * pre_installed_capacity;
  electricity[t] >= electricity[t-1] - ramp_rate_down * pre_installed_capacity;
  #OBJECTIVES
  min fom_cost: global.number_years_horizon * fom * pre_installed_capacity; // MEur
  min non_fuel_vom_cost: vom * electricity[t]; // MEur

  #NODE PCCC // post-combustion carbon capture of CHP plants
  #PARAMETERS
  full_capex = 3150.0; // MEur/(kt_CO2/h)-yr
  lifetime = 20.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/(kt_CO2/h)-yr
  fom = 0.0; // MEur/(kt_CO2/h)-yr
  vom = 0.0; // MEur/kt_CO2
  electricity_cons_capture = 0.4125;  // GWh/kt_CO2
  max_capacity = global.max_capacity_PCCC; // kt_CO2/h
  max_capture_rate = 0.9; // dimensionless
  conversion_factor_electricity = 1 / electricity_cons_capture;
  #VARIABLES
  internal: capacity; // kt_CO2/h
  internal: electricity[T]; // GW
  external: carbon_dioxide_intake[T];
  internal: carbon_dioxide_emitted[T];
  internal: carbon_dioxide_captured[T];
  #CONSTRAINTS
  capacity >= 0;
  electricity[t] >= 0;
  carbon_dioxide_intake[t] >= 0;
  carbon_dioxide_emitted[t] >= 0;
  carbon_dioxide_captured[t] >= 0;
  capacity <= max_capacity;
  carbon_dioxide_captured[t] <= capacity;
  carbon_dioxide_captured[t] == conversion_factor_electricity * electricity[t];
  carbon_dioxide_captured[t] <= max_capture_rate * carbon_dioxide_intake[t];
  carbon_dioxide_intake[t] == carbon_dioxide_captured[t] + carbon_dioxide_emitted[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
  min fom_cost: global.number_years_horizon * fom * capacity; // MEur
  min vom_cost: vom * carbon_dioxide_captured[t]; // MEur

  #HYPEREDGE CHP_PLANTS_LINKS
  #CONSTRAINTS
  CHP_PLANTS.carbon_dioxide[t] == PCCC.carbon_dioxide_intake[t];

#VARIABLES
external: electricity[T];
internal: electricity_CHP_PLANTS[T] <- CHP_PLANTS.electricity[T];
internal: electricity_PCCC[T] <- PCCC.electricity[T];
external: natural_gas[T] <- CHP_PLANTS.natural_gas[T];
external: carbon_dioxide_emitted[T] <- PCCC.carbon_dioxide_emitted[T];
external: carbon_dioxide_captured[T] <- PCCC.carbon_dioxide_captured[T];
#CONSTRAINTS
electricity[t] == electricity_CHP_PLANTS[t] - electricity_PCCC[t];
#OBJECTIVES
min emissions_cost: global.carbon_dioxide_emissions_cost * carbon_dioxide_emitted[t]; // MEur

#NODE OCGT_w_PCCC
  #NODE OCGT // open-cycle gas turbine
  #PARAMETERS
  full_capex = 560.0; // MEur/GW_el
  lifetime = 25.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/GW_el-yr
  fom = 18.6; // MEur/GW_el-yr
  vom = 0.0042; // MEur/GWh
  pre_installed_capacity = 0.0; // GW_el
  max_capacity = 100.0; // GW_el
  minimum_level = 0.0; // dimensionless
  specific_emissions = 0.202; // kt/GWh_th
  thermal_efficiency = 0.41; // dimensionless
  conversion_factor_natural_gas = thermal_efficiency;
  conversion_factor_carbon_dioxide = thermal_efficiency / specific_emissions;
  #VARIABLES
  internal: capacity; // GW_el
  internal: electricity[T]; // GW
  internal: natural_gas[T]; // GWh/h
  external: carbon_dioxide[T]; // kt/h
  #CONSTRAINTS
  capacity >= 0;
  electricity[t] >= 0;
  natural_gas[t] >= 0;
  carbon_dioxide[t] >= 0;
  minimum_level * (pre_installed_capacity + capacity) <= electricity[t];
  electricity[t] <= (pre_installed_capacity + capacity);
  electricity[t] == conversion_factor_natural_gas * natural_gas[t];
  electricity[t] == conversion_factor_carbon_dioxide * carbon_dioxide[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
  min fom_cost: global.number_years_horizon * fom * capacity; // MEur
  min non_fuel_vom_cost: vom * electricity[t]; // MEur

  #NODE PCCC // post-combustion carbon capture of CHP plants
  #PARAMETERS
  full_capex = 3150.0; // MEur/(kt_CO2/h)
  lifetime = 20.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/(kt_CO2/h)-yr
  fom = 0.0; // MEur/(kt_CO2/h)-yr
  vom = 0.0; // MEur/kt_CO2
  electricity_cons_capture = 0.4125; // GWh/kt_CO2
  max_capacity = global.max_capacity_PCCC; // kt_CO2/h
  max_capture_rate = 0.9; // dimensionless
  conversion_factor_electricity = 1 / electricity_cons_capture;
  #VARIABLES
  internal: capacity; // kt_CO2/h
  internal: electricity[T];
  external: carbon_dioxide_intake[T];
  internal: carbon_dioxide_emitted[T];
  internal: carbon_dioxide_captured[T];
  #CONSTRAINTS
  capacity >= 0;
  electricity[t] >= 0;
  carbon_dioxide_intake[t] >= 0;
  carbon_dioxide_emitted[t] >= 0;
  carbon_dioxide_captured[t] >= 0;
  capacity <= max_capacity;
  carbon_dioxide_captured[t] <= capacity;
  carbon_dioxide_captured[t] <= max_capture_rate * carbon_dioxide_intake[t];
  carbon_dioxide_intake[t] == carbon_dioxide_captured[t] + carbon_dioxide_emitted[t];
  carbon_dioxide_captured[t] == conversion_factor_electricity * electricity[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
  min fom_cost: global.number_years_horizon * fom * capacity; // MEur
  min vom_cost: vom * carbon_dioxide_captured[t]; // MEur

  #HYPEREDGE OCGT_LINKS
  #CONSTRAINTS
  OCGT.carbon_dioxide[t] == PCCC.carbon_dioxide_intake[t];

#VARIABLES
external: electricity[T];
internal: electricity_OCGT[T] <- OCGT.electricity[T];
internal: electricity_PCCC[T] <- PCCC.electricity[T];
external: natural_gas[T] <- OCGT.natural_gas[T];
external: carbon_dioxide_emitted[T] <- PCCC.carbon_dioxide_emitted[T];
external: carbon_dioxide_captured[T] <- PCCC.carbon_dioxide_captured[T];
#CONSTRAINTS
electricity[t] == electricity_OCGT[t] - electricity_PCCC[t];
#OBJECTIVES
min emissions_cost: global.carbon_dioxide_emissions_cost * carbon_dioxide_emitted[t]; // MEur

#NODE CCGT_w_PCCC // combined-cycle gas turbine
  #NODE CCGT
  #PARAMETERS
  full_capex = 830.0; // MEur/GW_el
  lifetime = 25.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/GW_el-yr
  fom = 27.8; // MEur/GW_el-yr
  vom = 0.0042; // MEur/GWh
  pre_installed_capacity = 0.0; // GW_el
  max_capacity = 100.0; // GW_el
  minimum_level = 0.0; // dimensionless
  specific_emissions = 0.202; // kt/GWh_th
  thermal_efficiency = 0.58; // dimensionless
  conversion_factor_natural_gas = thermal_efficiency;
  conversion_factor_carbon_dioxide = thermal_efficiency / specific_emissions;
  #VARIABLES
  internal: capacity; // GW_el
  internal: electricity[T]; // GW
  external: natural_gas[T]; // GWh/h
  external: carbon_dioxide[T]; // kt/h
  #CONSTRAINTS
  capacity >= 0;
  electricity[t] >= 0;
  natural_gas[t] >= 0;
  carbon_dioxide[t] >= 0;
  minimum_level * (pre_installed_capacity + capacity) <= electricity[t];
  electricity[t] <= (pre_installed_capacity + capacity);
  electricity[t] == conversion_factor_natural_gas * natural_gas[t];
  electricity[t] == conversion_factor_carbon_dioxide * carbon_dioxide[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
  min fom_cost: global.number_years_horizon * fom * capacity; // MEur
  min non_fuel_vom_cost: vom * electricity[t]; // MEur

  #NODE PCCC // post-combustion carbon capture of CCGT plants
  #PARAMETERS
  full_capex = 3150.0; // MEur/(kt_CO2/h)
  lifetime = 20.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/(kt_CO2/h)-yr
  fom = 0.0; // MEur/(kt_CO2/h)-yr
  vom = 0.0; // MEur/kt_CO2
  electricity_cons_capture = 0.4125; // GWh/kt_CO2
  max_capacity = global.max_capacity_PCCC; // kt_CO2/h
  max_capture_rate = 0.9; // dimensionless
  conversion_factor_electricity = 1 / electricity_cons_capture;
  #VARIABLES
  internal: capacity;
  internal: electricity[T];
  external: carbon_dioxide_intake[T];
  internal: carbon_dioxide_emitted[T];
  internal: carbon_dioxide_captured[T];
  #CONSTRAINTS
  capacity >= 0;
  electricity[t] >= 0;
  carbon_dioxide_intake[t] >= 0;
  carbon_dioxide_emitted[t] >= 0;
  carbon_dioxide_captured[t] >= 0;
  capacity <= max_capacity;
  carbon_dioxide_captured[t] <= capacity;
  carbon_dioxide_captured[t] <= max_capture_rate * carbon_dioxide_intake[t];
  carbon_dioxide_intake[t] == carbon_dioxide_captured[t] + carbon_dioxide_emitted[t];
  carbon_dioxide_captured[t] == conversion_factor_electricity * electricity[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
  min fom_cost: global.number_years_horizon * fom * capacity; // MEur
  min vom_cost: vom * carbon_dioxide_captured[t]; // MEur

  #HYPEREDGE CCGT_LINKS
  #CONSTRAINTS
  CCGT.carbon_dioxide[t] == PCCC.carbon_dioxide_intake[t];

#VARIABLES
external: electricity[T];
internal: electricity_CCGT[T] <- CCGT.electricity[T];
internal: electricity_PCCC[T] <- PCCC.electricity[T];
external: natural_gas[T] <- CCGT.natural_gas[T];
external: carbon_dioxide_emitted[T] <- PCCC.carbon_dioxide_emitted[T];
external: carbon_dioxide_captured[T] <- PCCC.carbon_dioxide_captured[T];
#CONSTRAINTS
electricity[t] == electricity_CCGT[t] - electricity_PCCC[t];
#OBJECTIVES
min emissions_cost: global.carbon_dioxide_emissions_cost * carbon_dioxide_emitted[t]; // MEur

#NODE METHANATION_PLANTS
#PARAMETERS
full_capex = 400.0; // MEur/(GWh_CH4/h)
lifetime = 20.0; // yr
annualised_capex = full_capex / lifetime; // MEur/(GWh_CH4/h)-yr
fom = 20.0; // MEur/(GWh_CH4/h)-yr
vom = 0.0; // MEur/GWh_CH4
pre_installed_capacity = 0.0; // GWh_CH4/h
max_capacity = 13.5; // GWh/h
minimum_level = 0.0; // dimensionless
conversion_efficiency = 0.78; // dimensionless
stoichiometric_coeff_CO2_CH4 = 1.0; // dimensionless
molar_mass_CH4 = 16.0; // g/mol
molar_mass_CO2 = 44.0; // g/mol
HHV_CH4 = 15.4; // GWh/kt
conversion_factor_hydrogen = conversion_efficiency;
conversion_factor_carbon_dioxide = (molar_mass_CH4 * HHV_CH4) / (stoichiometric_coeff_CO2_CH4 * molar_mass_CO2); // dimensionless
#VARIABLES
internal: capacity; // GWh_CH4/h
external: methane[T]; // GWh/h
external: hydrogen[T]; // GWh/h
external: carbon_dioxide[T]; // kt/h
#CONSTRAINTS
capacity >= 0;
methane[t] >= 0;
hydrogen[t] >= 0;
carbon_dioxide[t] >= 0;
pre_installed_capacity + capacity <= max_capacity;
minimum_level * (pre_installed_capacity + capacity) <= methane[t];
methane[t] <= pre_installed_capacity + capacity;
methane[t] == conversion_factor_hydrogen * hydrogen[t];
methane[t] == conversion_factor_carbon_dioxide * carbon_dioxide[t];
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
min fom_cost: global.number_years_horizon * fom * capacity; // MEur
min vom_cost: vom * methane[t]; // MEur

#NODE SMR_w_PCCC // steam methane reformers with post-combustion carbon capture
  #NODE SMR
  #PARAMETERS
  full_capex = 400.0; // MEur/(GWh_H2/h)
  lifetime = 20.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/(GWh_H2/h)
  fom = 20.0; // MEur/(GWh_H2/h)-yr
  vom = 0.0; // MEur/GWh
  pre_installed_capacity = 0.0; // GWh/h
  max_capacity = 13.5; // GWh/h
  minimum_level = 0.0; // dimensionless
  conversion_efficiency = 0.8; // dimensionless
  electricity_consumption = 0.023; // dimensionless (GWh_el/GWh_H2)
  specific_emissions = 0.202; // kt/GWh
  conversion_factor_natural_gas = conversion_efficiency;
  conversion_factor_electricity = 1 / electricity_consumption;
  conversion_factor_carbon_dioxide = conversion_efficiency / specific_emissions;
  #VARIABLES
  internal: capacity; // GWh_H2/h
  external: natural_gas[T]; // GWh/h
  external: hydrogen[T]; // GWh/h
  external: electricity[T]; // GW
  external: carbon_dioxide[T]; // kt/h
  #CONSTRAINTS
  capacity >= 0;
  natural_gas[t] >= 0;
  hydrogen[t] >= 0;
  electricity[t] >= 0;
  carbon_dioxide[t] >= 0;
  pre_installed_capacity + capacity <= max_capacity;
  hydrogen[t] <= pre_installed_capacity + capacity;
  hydrogen[t] == conversion_factor_natural_gas * natural_gas[t];
  hydrogen[t] == conversion_factor_electricity * electricity[t];
  hydrogen[t] == conversion_factor_carbon_dioxide * carbon_dioxide[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
  min fom_cost: global.number_years_horizon * fom * capacity; // MEur
  min vom_cost: vom * hydrogen[t]; // MEur

  #NODE PCCC // post-combustion carbon capture of CHP plants
  #PARAMETERS
  full_capex = 3150.0; // MEur/(kt/h)
  lifetime = 20.0; // yr
  annualised_capex = full_capex / lifetime; // MEur/(kt/h)-yr
  fom = 0.0; // MEur/(kt/h)-yr
  vom = 0.0; // MEur/kt
  electricity_cons_capture = 0.4125; // GWh_el/kt
  max_capacity = global.max_capacity_PCCC; // kt/h
  max_capture_rate = 0.9; // dimensionless
  conversion_factor_electricity = 1 / electricity_cons_capture;
  #VARIABLES
  internal: capacity;
  external: electricity[T];
  external: carbon_dioxide_intake[T];
  external: carbon_dioxide_emitted[T];
  external: carbon_dioxide_captured[T];
  #CONSTRAINTS
  capacity >= 0;
  electricity[t] >= 0;
  carbon_dioxide_intake[t] >= 0;
  carbon_dioxide_emitted[t] >= 0;
  carbon_dioxide_captured[t] >= 0;
  capacity <= max_capacity;
  carbon_dioxide_captured[t] <= capacity;
  carbon_dioxide_captured[t] <= max_capture_rate * carbon_dioxide_intake[t];
  carbon_dioxide_captured[t] == conversion_factor_electricity * electricity[t];
  carbon_dioxide_intake[t] == carbon_dioxide_captured[t] + carbon_dioxide_emitted[t];
  #OBJECTIVES
  min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
  min fom_cost: global.number_years_horizon * fom * capacity; // MEur
  min vom_cost: vom * carbon_dioxide_captured[t]; // MEur

  #HYPEREDGE SMR_LINKS
  #CONSTRAINTS
  SMR.carbon_dioxide[t] == PCCC.carbon_dioxide_intake[t];

#VARIABLES
external: electricity[T];
internal: electricity_SMR[T] <- SMR.electricity[T];
internal: electricity_PCCC[T] <- PCCC.electricity[T];
external: natural_gas[T] <- SMR.natural_gas[T];
external: hydrogen[T] <- SMR.hydrogen[T];
external: carbon_dioxide_emitted[T] <- PCCC.carbon_dioxide_emitted[T];
external: carbon_dioxide_captured[T] <- PCCC.carbon_dioxide_captured[T];
#CONSTRAINTS
electricity[t] == electricity_SMR[t] + electricity_PCCC[t];
#OBJECTIVES
min emissions_cost: global.carbon_dioxide_emissions_cost * carbon_dioxide_emitted[t]; // MEur

#NODE DIRECT_AIR_CAPTURE_PLANTS // Direct air capture plants
#PARAMETERS
full_capex = 7500.0; // MEur/(kt_CO2/h)
lifetime = 30.0; // yr
annualised_capex = full_capex / lifetime; // MEur/(kt_CO2/h)-yr
fom = 25.0; //  MEur/(kt_CO2/h)-yr
vom = 0.0; // MEur/kt_CO2
pre_installed_capacity = 0.0; // kt_CO2/h
max_capacity = global.max_capacity_DAC; // kt_CO2/h
electricity_consumption = 0.366; // GWh/kt_CO2
natural_gas_consumption = 1.47; // GWh/kt_CO2
specific_emissions = 0.202; // kt_CO2/GWh_th
conversion_factor_natural_gas = 1 / natural_gas_consumption;
conversion_factor_electricity = 1 / electricity_consumption;
#VARIABLES
internal: capacity; // kt_CO2/h
external: electricity[T]; // GW
external: natural_gas[T]; // GWh/h
external: carbon_dioxide_captured[T]; // kt_CO2/h
external: carbon_dioxide_output[T]; // kt_CO2/h
#CONSTRAINTS
capacity >= 0;
electricity[t] >= 0;
natural_gas[t] >= 0;
carbon_dioxide_captured[t] >= 0;
carbon_dioxide_output[t] >= 0;
pre_installed_capacity + capacity <= max_capacity;
carbon_dioxide_captured[t] <= capacity;
carbon_dioxide_captured[t] == conversion_factor_natural_gas * natural_gas[t];
carbon_dioxide_captured[t] == conversion_factor_electricity * electricity[t];
carbon_dioxide_output[t] == carbon_dioxide_captured[t] + specific_emissions * natural_gas[t];
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity; // MEur
min fom_cost: global.number_years_horizon * fom * capacity; // MEur
min vom_cost: vom * carbon_dioxide_captured[t]; // MEur

#NODE BATTERY_STORAGE
#PARAMETERS
full_capex_flow = 108.0; // MEur/GW
full_capex_stock = 326.25; // MEur/GWh
lifetime_flow = 20.0; // yr
lifetime_stock = 10.0; // yr
annualised_capex_flow = full_capex_flow / lifetime_flow; // MEur/GW-yr
annualised_capex_stock = full_capex_stock / lifetime_stock; // MEur/GWh-yr
fom_flow = 5.4; // MEur/GW-yr
fom_stock = 16.3125; // MEur/GWh-yr
vom_flow = 0.0; // MEur/GWh
vom_stock = 0.0; // MEur/GWh
pre_installed_capacity_flow = 0.0; // GW
pre_installed_capacity_stock = 0.0; // GWh
max_capacity_flow = 2500; // GW
max_capacity_stock = 5000; // GWh
charge_efficiency = 0.92; // dimensionless
discharge_efficiency = 0.92; // dimensionless
minimum_storage_level = 0.0; // dimensionless
self_discharge = 0.999; // dimensionless
charge_discharge_ratio = 0.5; // dimensionless - fraction of the power capacity limiting the amount of electricity that can be charged in 1 hour
#VARIABLES
external: electricity[T]; // GW
internal: electricity_charged[T]; // GW
internal: electricity_discharged[T]; // GW
internal: capacity_stock; // GWh
internal: capacity_flow; // GW
internal: electricity_stored[T]; // GWh
#CONSTRAINTS
electricity_charged[t] >= 0;
electricity_discharged[t] >= 0;
capacity_stock >= 0;
capacity_flow >= 0;
electricity_stored[t] >= 0;
pre_installed_capacity_stock + capacity_stock <= max_capacity_stock;
pre_installed_capacity_flow + capacity_flow <= max_capacity_flow;
electricity_stored[0] == electricity_stored[T-1];
minimum_storage_level * (pre_installed_capacity_stock + capacity_stock) <= electricity_stored[t];
electricity_stored[t] <= (pre_installed_capacity_stock + capacity_stock);
electricity_stored[t+1] == self_discharge * electricity_stored[t] + charge_efficiency * electricity_charged[t] - (1 / discharge_efficiency) * electricity_discharged[t];
electricity_discharged[t] <= (pre_installed_capacity_flow + capacity_flow);
charge_efficiency * electricity_charged[t] <= charge_discharge_ratio * (pre_installed_capacity_flow + capacity_flow);
electricity[t] == -electricity_charged[t] + electricity_discharged[t];
#OBJECTIVES
min investment_cost: global.number_years_horizon * (annualised_capex_stock * capacity_stock + annualised_capex_flow * capacity_flow); // MEur
min fom_cost: global.number_years_horizon * (fom_stock * capacity_stock + fom_flow * capacity_flow); // MEur
min vom_cost: vom_stock * electricity_stored[t] + vom_flow * electricity_charged[t]; // MEur

#NODE PUMPED_HYDRO_STORAGE
#PARAMETERS
fom = 45.0; // MEur/GWh
vom = 0.008; // Mâ‚¬/GW
pre_installed_capacity_flow = 1.3; // GW
pre_installed_capacity_stock = 5.3; // GWh
charge_efficiency = 0.9; // dimensionless
discharge_efficiency = 0.9; // dimensionless
minimum_storage_level = 0.0; // dimensionless
self_discharge = 1.0; // dimensionless
#VARIABLES
external: electricity[T]; // GW
internal: electricity_charged[T]; // GW
internal: electricity_discharged[T]; // GW
internal: electricity_stored[T]; // GWh
#CONSTRAINTS
electricity_charged[t] >= 0;
electricity_discharged[t] >= 0;
electricity_stored[t] >= 0;
electricity_stored[0] == electricity_stored[T-1];
minimum_storage_level * pre_installed_capacity_stock <= electricity_stored[t];
electricity_stored[t] <= pre_installed_capacity_stock;
electricity_stored[t+1] == self_discharge * electricity_stored[t] + charge_efficiency * electricity_charged[t] - (1 / discharge_efficiency) * electricity_discharged[t];
electricity_charged[t] <= pre_installed_capacity_flow;
electricity_discharged[t] <= pre_installed_capacity_flow;
electricity[t] == -electricity_charged[t] + electricity_discharged[t];
#OBJECTIVES
min fom_cost: global.number_years_horizon * fom * pre_installed_capacity_stock; // MEur
min vom_cost: vom * electricity_charged[t]; // MEur

#NODE NATURAL_GAS_STORAGE
#PARAMETERS
fom = 0.0025; // MEur/GWh
vom = 0.0; // Mâ‚¬/(GWh_NG/h)
pre_installed_capacity_stock = 8000.0; // GWh
pre_installed_capacity_flow = 7.0;  // GWh/h
charge_efficiency = 0.987; // dimensionless - some gas is burnt to power compressors
discharge_efficiency = 1.0; // dimensionless - no energy is required to release gas
minimum_storage_level = 0.0; // dimensionless
self_discharge = 1.0; // dimensionless
charge_discharge_ratio = 0.5; // dimensionless
#VARIABLES
external: natural_gas[T]; // GWh/h
internal: natural_gas_out[T]; // GWh/h
internal: natural_gas_in[T]; // GWh/h
internal: natural_gas_stored[T]; // GWh/h
#CONSTRAINTS
natural_gas_in[t] >= 0;
natural_gas_out[t] >= 0;
natural_gas_stored[t]>= 0;
natural_gas_stored[0] == natural_gas_stored[T-1];
minimum_storage_level * pre_installed_capacity_stock <= natural_gas_stored[t];
natural_gas_stored[t] <= pre_installed_capacity_stock;
natural_gas_stored[t+1] == self_discharge * natural_gas_stored[t] + charge_efficiency * natural_gas_in[t] - (1 / discharge_efficiency) * natural_gas_out[t];
natural_gas_out[t] <= pre_installed_capacity_flow;
natural_gas_in[t] <= charge_discharge_ratio * pre_installed_capacity_flow;
natural_gas[t] == -natural_gas_in[t] + natural_gas_out[t];
#OBJECTIVES
min fom_cost: global.number_years_horizon * fom * pre_installed_capacity_stock;
min vom_cost: vom * natural_gas_in[t];

#NODE HYDROGEN_STORAGE
#PARAMETERS
full_capex = 11.0; // MEur/GWh_H2
lifetime = 30.0; // yr
annualised_capex = full_capex / lifetime; // MEur/GWh_H2-yr
fom = 0.55; // MEur/GWh_H2-yr
vom = 0.0; // Mâ‚¬/(GWh/h)
duration_ratio = 10.0; // dimensionless
pre_installed_capacity_stock = 0.0; // GWh_H2
pre_installed_capacity_flow = duration_ratio * pre_installed_capacity_stock; // GWh/h
max_capacity_stock = 1000; // GWh
charge_efficiency = 1.0; // dimensionless
discharge_efficiency = 1.0; // dimensionless
minimum_storage_level = 0.0; // dimensionless
self_discharge = 1.0; // dimensionless
charge_discharge_ratio = 1.0; // dimensionless
#VARIABLES
internal: capacity_stock; // GWh_H2
internal: capacity_flow; // GWh_H2/h
internal: hydrogen_stored[T]; // GWh
internal: hydrogen_out[T]; // GWh/h
internal: hydrogen_in[T]; // GWh/h
external: hydrogen[T]; // GWh/h
#CONSTRAINTS
capacity_stock >= 0;
capacity_flow >= 0;
hydrogen_stored[t] >= 0;
hydrogen_in[t] >= 0;
hydrogen_out[t] >= 0;
pre_installed_capacity_stock + capacity_stock <= max_capacity_stock;
minimum_storage_level * (pre_installed_capacity_stock + capacity_stock) <= hydrogen_stored[t];
hydrogen_stored[t] <= (pre_installed_capacity_stock + capacity_stock);
hydrogen_stored[0] == hydrogen_stored[T-1];
hydrogen_stored[t+1] == self_discharge * hydrogen_stored[t] + charge_efficiency * hydrogen_in[t] - (1 / discharge_efficiency) * hydrogen_out[t];
duration_ratio * (pre_installed_capacity_flow + capacity_flow) == (pre_installed_capacity_stock + capacity_stock);
hydrogen_out[t] <= (pre_installed_capacity_flow + capacity_flow);
hydrogen_in[t] <= charge_discharge_ratio * (pre_installed_capacity_flow + capacity_flow);
hydrogen[t] == -hydrogen_in[t] + hydrogen_out[t];
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity_stock; // MEur
min fom_cost: global.number_years_horizon * fom * capacity_stock; // MEur
min vom_cost: vom * hydrogen_in[t]; // MEur

#NODE CARBON_DIOXIDE_STORAGE
#PARAMETERS
full_capex = 0.1; // MEur/kt
lifetime = 20.0; // yr
annualised_capex = full_capex / lifetime; // MEur/kt-yr
fom = 0.0; // MEur/kt-yr
vom = 0.0; // MEur/kt
pre_installed_capacity = 0.0; // kt
max_capacity_stock = 100.0 * global.max_carbon_dioxide_storage_capacity_multiplier; // kt
duration_ratio = 5.0; // dimensionless
charge_discharge_ratio = 1.0; // dimensionless
charge_efficiency = 1.0; // dimensionless
discharge_efficiency = 1.0; // dimensionless
self_discharge = 1.0; // dimensionless
#VARIABLES
internal: capacity_stock; // kt/h
internal: capacity_flow; // kt
external: carbon_dioxide[T]; // kt/h
internal: carbon_dioxide_in[T]; // kt/h
internal: carbon_dioxide_out[T]; // kt/h
internal: carbon_dioxide_stored[T]; // kt/h
#CONSTRAINTS
capacity_stock >= 0;
capacity_flow >= 0;
carbon_dioxide_in[t] >= 0;
carbon_dioxide_out[t] >= 0;
carbon_dioxide_stored[t] >= 0;
capacity_stock <= max_capacity_stock;
carbon_dioxide_stored[0] == carbon_dioxide_stored[T-1];
carbon_dioxide_stored[t] <= capacity_stock;
carbon_dioxide_stored[t+1] == self_discharge * carbon_dioxide_stored[t] + charge_efficiency * carbon_dioxide_in[t] - (1 / discharge_efficiency) * carbon_dioxide_out[t];
duration_ratio * capacity_flow == capacity_stock;
carbon_dioxide_out[t] <= capacity_flow;
carbon_dioxide_in[t] <= charge_discharge_ratio * capacity_flow;
carbon_dioxide[t] == -carbon_dioxide_in[t] + carbon_dioxide_out[t];
#OBJECTIVES
min investment_cost: global.number_years_horizon * annualised_capex * capacity_stock; // MEur
min fom_cost: global.number_years_horizon * fom * capacity_stock; // MEur
min vom_cost: vom * carbon_dioxide_in[t]; // MEur

#NODE ELECTRICAL_DEMAND_RESPONSE
#PARAMETERS
value_of_lost_load = 3.0; // MEur/GWh
max_demand_shed = 1000.0; // GWh - parameter used to limit instantaneous load shedding
//electricity_demand_ev[global.number_days_horizon] = global.demand_el_ev; // GWh - daily electricity demand for EV charging
#VARIABLES
external: load_shedding[T]; // GWh/h - energy not served
external: ev_charge[T]; // GW
#CONSTRAINTS
load_shedding[t] >= 0;
ev_charge[t] >= 0;
load_shedding[t] <= max_demand_shed;
sum(ev_charge[t+i] for i in [0:23]) == global.demand_el_ev[t/24] where mod(t,24) == 0;
#OBJECTIVES
min load_shedding_cost: value_of_lost_load * load_shedding[t]; // MEur

#NODE NATURAL_GAS_DEMAND_RESPONSE
#PARAMETERS
value_of_lost_load = 0.5; // MEur/GWh
max_demand_shed = 1000.0; // GWh - parameter used to limit instantaneous load shedding
#VARIABLES
external: load_shedding[T]; // GWh/h - energy not served
#CONSTRAINTS
load_shedding[t] >= 0;
load_shedding[t] <= max_demand_shed;
#OBJECTIVES
min load_shedding_cost: value_of_lost_load * load_shedding[t]; // MEur

#NODE HYDROGEN_DEMAND_RESPONSE
#PARAMETERS
value_of_lost_load = 0.5; // MEur/GWh
max_demand_shed = 1000.0; // GWh - parameter used to limit instantaneous load shedding
#VARIABLES
external: load_shedding[T]; // GWh/h - energy not served
#CONSTRAINTS
load_shedding[t] >= 0;
load_shedding[t] <= max_demand_shed;
#OBJECTIVES
min load_shedding_cost: value_of_lost_load * load_shedding[t]; // MEur

#HYPEREDGE links
#PARAMETERS
specific_emissions_natural_gas = 0.202; // kt_CO2/GWh_NG
carbon_dioxide_emissions_quota = 15520 * global.number_years_horizon; // kt
heat_demand_natural_gas = import "../data/heat_demand_natural_gas.csv"; // GWh/h
industry_demand_natural_gas = import "../data/industry_demand_natural_gas.csv"; // GWh/h
legacy_SMR_demand_natural_gas = import "../data/legacy_SMR_demand_natural_gas.csv"; // GWh/h
transport_demand_natural_gas = import "../data/transport_demand_natural_gas.csv"; // GWh/h
industry_demand_hydrogen = import "../data/industry_demand_hydrogen.csv"; // GWh/h
transport_demand_hydrogen = import "../data/transport_demand_hydrogen.csv"; // GWh/h
#CONSTRAINTS
power_balance: SOLAR_PV_PLANTS.electricity[t] + ONSHORE_WIND_PLANTS.electricity[t] + OFFSHORE_WIND_PLANTS.electricity[t] + WASTE_POWER_PLANTS_w_PCCC.electricity[t] + BIOMASS_POWER_PLANTS_w_PCCC.electricity[t]
+ NUCLEAR_POWER_PLANTS.electricity[t] + HYDROGEN_FUEL_CELLS.electricity[t] + CHP_PLANTS_w_PCCC.electricity[t] + OCGT_w_PCCC.electricity[t] + CCGT_w_PCCC.electricity[t]
+ PUMPED_HYDRO_STORAGE.electricity[t] + BATTERY_STORAGE.electricity[t] + ELECTRICITY_INTERCONNECTION.electricity[t] + ELECTRICAL_DEMAND_RESPONSE.load_shedding[t] == global.demand_el_base[t] + global.demand_el_ht[t]
+ ELECTRICAL_DEMAND_RESPONSE.ev_charge[t] + DIRECT_AIR_CAPTURE_PLANTS.electricity[t] + ELECTROLYSIS_PLANTS.electricity[t] + SMR_w_PCCC.electricity[t];

natural_gas_balance: METHANATION_PLANTS.methane[t] + NATURAL_GAS_STORAGE.natural_gas[t] + NATURAL_GAS_IMPORTS.natural_gas[t] + NATURAL_GAS_DEMAND_RESPONSE.load_shedding[t]
== heat_demand_natural_gas[t] + industry_demand_natural_gas[t] - legacy_SMR_demand_natural_gas[t] + transport_demand_natural_gas[t] + DIRECT_AIR_CAPTURE_PLANTS.natural_gas[t]
+ SMR_w_PCCC.natural_gas[t] + CHP_PLANTS_w_PCCC.natural_gas[t] + CCGT_w_PCCC.natural_gas[t] + OCGT_w_PCCC.natural_gas[t];

hydrogen_balance: SMR_w_PCCC.hydrogen[t] + ELECTROLYSIS_PLANTS.hydrogen[t] + HYDROGEN_STORAGE.hydrogen[t] + HYDROGEN_IMPORTS.hydrogen[t] + HYDROGEN_DEMAND_RESPONSE.load_shedding[t] == industry_demand_hydrogen[t] + transport_demand_hydrogen[t] + METHANATION_PLANTS.hydrogen[t] + HYDROGEN_FUEL_CELLS.hydrogen[t];

carbon_dioxide_balance: BIOMASS_POWER_PLANTS_w_PCCC.carbon_dioxide_captured[t] + WASTE_POWER_PLANTS_w_PCCC.carbon_dioxide_captured[t] + CHP_PLANTS_w_PCCC.carbon_dioxide_captured[t] + CCGT_w_PCCC.carbon_dioxide_captured[t] + OCGT_w_PCCC.carbon_dioxide_captured[t] + SMR_w_PCCC.carbon_dioxide_captured[t]
+ DIRECT_AIR_CAPTURE_PLANTS.carbon_dioxide_output[t] + CARBON_DIOXIDE_STORAGE.carbon_dioxide[t] ==  METHANATION_PLANTS.carbon_dioxide[t] + CARBON_DIOXIDE_EXPORTS.carbon_dioxide[t];

carbon_dioxide_budget: sum(specific_emissions_natural_gas * (heat_demand_natural_gas[h] + industry_demand_natural_gas[h] - legacy_SMR_demand_natural_gas[h] + transport_demand_natural_gas[h] - NATURAL_GAS_DEMAND_RESPONSE.load_shedding[h]) - DIRECT_AIR_CAPTURE_PLANTS.carbon_dioxide_captured[h]
+ BIOMASS_POWER_PLANTS_w_PCCC.carbon_dioxide_emitted[h] + WASTE_POWER_PLANTS_w_PCCC.carbon_dioxide_emitted[h] + CHP_PLANTS_w_PCCC.carbon_dioxide_emitted[h] + CCGT_w_PCCC.carbon_dioxide_emitted[h] + OCGT_w_PCCC.carbon_dioxide_emitted[h] + SMR_w_PCCC.carbon_dioxide_emitted[h] for h in [0:T-1]) <= carbon_dioxide_emissions_quota;
